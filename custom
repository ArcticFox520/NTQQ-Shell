#!/bin/env bash
#通用颜色变量
black="\e[30m"
red="\033[31m"
green="\033[32m"
yellow="\033[33m"
blue="\033[34m"
purple="\033[35m"
cyan="\033[36m"
white="\033[37m"
background="\033[0m"
#日志颜色变量
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'
#Github 镜像
export GHP="https://gh.arcticfox.top/"
REPO=NTQQ-Shell

function log.info(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${BLUE}[INFO][${timestamp}] - $1${NC}"
}
function log.success(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${GREEN}[SUCCESS][${timestamp}] - $1${NC}"
}
function log.warn(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${YELLOW}[WARN][${timestamp}] - $1${NC}"
}
function log.error(){
  local timestamp=$(date +"%H:%M:%S")
  echo -e "${RED}[ERROR][${timestamp}] - $1${NC}" >&2
}

function selectLocation(){
if [ -n "${LOCATION}" ]; then
    return 0
fi
echo
cat << FOX
 ———————————————————
 ${cyan}请问您的设备所在位置是? 
    ${green}1${white}. 中国大陆 ${background}
    ${green}2${white}. 其他位置 ${background}
 ———————————————————
FOX
echo -en " "${cyan}请输入数字 ${white}[1-2]: ${background}
read num
case "${num}" in
  1)
    export LOCATION=CN
    return 0
    ;;
  2)
    return 1
    ;;
  *)
    log.warn "输入错误 保持默认 中国大陆"
    return 0
    ;;
esac
}
function getLocation(){
if [ -x "$(command -v jq)" ]
then
  ApiList=(
    "ipinfo.io/json .country"
    "ipapi.co/json .country"
    "ip-api.com/json .countryCode"
  )
  for i in ${ApiList[@]}
  do
    local Api=$(echo ${i} | awk '{print $1}')
    local field=$(echo ${i} | awk '{print $2}')
    local result=$(curl -sL --connect-timeout 5 --max-time 10 ${Api})
    if echo "${result}" | jq -r ${field} | grep -q "CN";then
      return 0
    else
      return 1
    fi
  done
else
  if [ -x "$(command -v curl)" ]
  then
    ApiList=(
      "ipinfo.io/country"
      "ipapi.co/country"
    )
    for i in ${ApiList[@]}
    do
      local result=$(curl -sL --connect-timeout 5 --max-time 10 ${i})
      if echo "${result}" | grep -q "CN";then
        return 0
      else
        return 1
      fi
    done
  else
    selectLocation
    return $?
  fi
fi
}

function IncrCounter(){
  if [ -z ${count} ]
  then
    count=0
  fi
  ((count++))
  case ${count} in
    3)
      count=0
      return 1
  esac
  return 0
}

function getFile(){
file="$1"
URL="$2"
Download(){
  log.info "正在下载 ${file}"
  until ${Command}
  do
    if ! IncrCounter
    then
      log.error "错误次数过多"
      return 1
    fi
    log.warn "下载失败 三秒后重试"
    sleep 3s
  done
  log.success "下载完成"
  return 0
}
if $(type wget > /dev/null 2>&1) && $(wget --help 2>&1 | grep -q show-progress)
then
  Command="wget --quiet --show-progress --output-document="${file}" --continue "${URL}""
  Download
elif $(type curl > /dev/null 2>&1) && $(curl --help all 2>&1 | grep -q progress-bar)
then
  Command="curl --output "${file}" --progress-bar --location --continue-at - "${URL}""
  Download
elif $(type curl > /dev/null 2>&1)
then
  Command="curl --output "${file}" --continue-at - "${URL}""
  Download
elif $(type wget > /dev/null 2>&1)
then
  Command="wget --output-document="${file}" --continue "${URL}""
  Download
else
  log.error "无下载器"
  return 1
fi
}

function gitCR(){
gitClone(){
if getLocation
then
  if git clone --depth=1 --branch=$1 ${GHP}https://github.com/$2
  then
    return 0
  else
    return 1
  fi
else
  if git clone --depth=1 --branch=$1 https://github.com/$2
  then
    return 0
  else
    return 1
  fi
fi
}
gitRelease(){
if getLocation
then
  if getFile $1 ${GHP}https://github.com/$2/releases/latest/download/$3
  then
    return 0
  else
    return 1
  fi
else
  if getFile $1 https://github.com/$2/releases/latest/download/$3
  then
    return 0
  else
    return 1
  fi
fi
}
gitRaw(){
if getLocation
then
  if getFile $1 ${GHP}https://github.com/$2/raw/refs/heads/$3/$4
  then
    return 0
  else
    return 1
  fi
else
  if getFile $1 ${GHP}https://github.com/$2/raw/refs/heads/$3/$4
  then
    return 0
  else
    return 1
  fi
fi
}
case $1 in
clone)
  # $2: 分支名
  # $3: 用户名/仓库名
  gitClone $2 $3;;
release)
  # $2: 保存文件名
  # $3: 用户名/仓库名
  # $4: release文件名
  gitRelease $2 $3 $4;;
raw)
  # $2: 保存文件名
  # $3 用户名/仓库名
  # $4 分支名
  # $5 文件路径
  gitRaw $2 $3 $4 $5;;
esac
}

function LxIt(){
setSourcList(){
if grep -iq ubuntu /etc/issue
then
  if getLocation
  then
    if grep -iq "ports.ubuntu.com" /etc/apt/sources.list
    then
      OldSource="ports.ubuntu.com"
      NewSource="mirrors.cernet.edu.cn"
      sed -i "s|${OldSource}|${NewSource}|g" /etc/apt/sources.list
    fi
  fi
fi
if grep -iq debian /etc/issue
then
  if getLocation
  then
    if grep -iq "deb.debian.org" /etc/apt/sources.list
    then
      OldSource="deb.debian.org"
      NewSource="mirrors.cernet.edu.cn"
      sed -i "s|${OldSource}|${NewSource}|g" /etc/apt/sources.list
    fi
  fi
fi
log.info "正在更新 软件源列表"
apt -y update
log.info "更新完成"
}
package(){
if ! dpkg -s git > /dev/null 2>&1
then
  setSourcList
  log.info "正在安装 git"
  until apt install -y git
  do
    log.warn "安装失败 3秒后重试"
    sleep 3s
  done
  log.success "安装成功"
fi
}
package
log.info "正在克隆 ${REPO}"
if gitCR clone main ArcticFox520/${REPO}
then
  log.success "克隆成功"
else
  log.error "克隆失败"
  exit
fi
bash ${REPO}/run
}
case "$(uname -o)" in
*Linux*)
  if grep -iq ubuntu /etc/issue
  then
    LxIt
    exit
  fi
  log.erro "暂不支持您的Linux发行版"
  exit
  ;;
*)
  log.erro "暂不支持您的系统"
  exit
esac